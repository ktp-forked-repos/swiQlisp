#!/bin/bash
# -*- page-delimiter: "^#" -*-

# Copyright © 2011 Sebastian D. Tennant <sdt@sebyte.me>
#
# This file is part of swiQlisp — site-wide Quicklisp.
#
# swiQlisp is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# swiQlisp is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# swiQlisp.  If not, see <http://www.gnu.org/licenses/>

# Commentary:
#
#  This script (swiqlisp) is the main tool for managing your site-wide
#  installation of Quicklisp.
#
#  Use the script swiqlisp-install to install Quicklisp site-wide in the first
#  instance.


#-----------------------------------------------------------------------------
# utility function
ensure_no_trailing_slash () {
    if test ${1: -1} = /; then echo -n ${1:0: -1}
    else echo -n $1
    fi ; }

#-----------------------------------------------------------------------------
# source /etc/swiqlisp.rc & $SYSUSR_HOME/swiqlisp-utils

if test -r /etc/swiqlisp.rc; then
    source /etc/swiqlisp.rc
else
    echo "Error: /etc/swiqlisp.rc not found.  Aborting."
    exit 1
fi

# remove trailing slash in SYSUSR_HOME (if any)
SYSUSR_HOME=$(ensure_no_trailing_slash $SYSUSR_HOME)

if test -r $SYSUSR_HOME/swiqlisp-utils; then
    source $SYSUSR_HOME/swiqlisp-utils
else
    echo "Error: $SYSUSR_HOME/swiqlisp-utils not found.  Aborting."
    exit 1
fi

# debugging
if test $DEBUG = on; then
    echo "debug: SYSUSR=$SYSUSR"
    echo "debug: SYSUSR_HOME=$SYSUSR_HOME";
fi;

#-----------------------------------------------------------------------------
# variables, sanity checks on command line args, lisp check/setup

TMP_DIR=$SYSUSR_HOME/tmp; LOG_DIR=$TMP_DIR/log; ACTION=$1; OBJECT=$2

usage="Usage: [sudo] swiqlisp <query-or-action> [<object>]"
check_help "$usage"
if test \( "${ACTION:0:7}" = "install" -o "${ACTION:0:6}" = "remove" \) -a \
        -z "$OBJECT"; then
    echo "$usage"; exit 0
fi

check_lisp_and_setup_accordingly

#-----------------------------------------------------------------------------
# shell functions

rotate_installed_systems_files () {
    # truncate the two 'difference' files
    echo -n "" > $TMP_DIR/installed-systems.added
    echo -n "" > $TMP_DIR/installed-systems.removed
    # 'current' is now 'old'
    mv -f $TMP_DIR/installed-systems.current \
        $TMP_DIR/installed-systems.old
    chown $SYSUSR:nogroup $TMP_DIR/installed-systems.old
    # update 'current' (FIXME - how to handle multiple dists?)
    cat $SYSUSR_HOME/quicklisp/dists/quicklisp/installed/systems/*.txt 2>/dev/null \
        | sort > $TMP_DIR/installed-systems.current # [1]
    chown $SYSUSR:nogroup $TMP_DIR/installed-systems.current
    # establish which systems have just been added
    grep -v -f $TMP_DIR/installed-systems.old \
        $TMP_DIR/installed-systems.current \
        | sort > $TMP_DIR/installed-systems.added
    # establish which systems have just been removed
    grep -v -f $TMP_DIR/installed-systems.current \
        $TMP_DIR/installed-systems.old \
        | sort > $TMP_DIR/installed-systems.removed; }

write_links_to_additional_system_files () {
    for system in $(cat $TMP_DIR/installed-systems.added); do
        ln -s  ../quicklisp/$system $SYSUSR_HOME/installed-systems/
    done; }

remove_links_to_removed_system_files () {
    for system in $(cat $TMP_DIR/installed-systems.removed); do
        rm $SYSUSR_HOME/installed-systems/$(basename $system)
    done; }

refresh_system_links () {
    rm -f $SYSUSR_HOME/installed-systems/*.asd
    for system in $(cat $TMP_DIR/installed-systems.current); do
        ln -s  ../quicklisp/$system $SYSUSR_HOME/installed-systems/
    done; }


#-----------------------------------------------------------------------------
# lisp command & functions which use it

LISP_COMMAND='$SU -c \
"$INVOC $load $SYSUSR_HOME/quicklisp/setup \
        $load $SYSUSR_HOME/swiqlisp.lisp \
        $COMMANDS" $SYSUSR'

LISP_ERROR_MSG='\\nA Lisp error occurred.  See:\\n\\n $ERRLOG\\n\\nfor more information.'

# queries
list () {
    EVAL1="'(list-installed-$1)'"
    EVAL2="'(list-available-$1)'"
    COMMANDS="$eval $EVAL1 $eval $EVAL2 $quit"
    [ $DEBUG = on ] && eval echo "debug: $LISP_COMMAND"
    eval "$LISP_COMMAND" ; } # $LISP_COMMAND must be quoted here

list_release_systems () {
    EVAL="'(list-release-systems \"$OBJECT\")'"
    COMMANDS="$eval $EVAL $quit"
    [ $DEBUG = on ] && eval echo "debug: $LISP_COMMAND"
    eval "$LISP_COMMAND" ; }

list_dependencies () {
    EVAL="'(list-dependencies \"$OBJECT\")'"
    COMMANDS="$eval $EVAL $quit"
    [ $DEBUG = on ] && eval echo "debug: $LISP_COMMAND"
    eval "$LISP_COMMAND" ; }

system_apropos () {
    EVAL="'(swiqlisp-apropos \"$OBJECT\")'"
    COMMANDS="$eval $EVAL $quit"
    [ $DEBUG = on ] && eval echo "debug: $LISP_COMMAND"
    eval "$LISP_COMMAND" ; }

versions () {
    EVAL="'(versions)'"
    COMMANDS="$eval $EVAL $quit"
    [ $DEBUG = on ] && eval echo "debug: $LISP_COMMAND"
    eval "$LISP_COMMAND" ; }

# action tools
additional_systems_report () {
    EVAL="'(additional-systems-report)'"
    COMMANDS="$eval $EVAL $quit"
    [ $DEBUG = on ] && eval echo "debug: $LISP_COMMAND"
    eval "$LISP_COMMAND"; }

removed_systems_report () {
    EVAL="'(removed-systems-report)'"
    COMMANDS="$eval $EVAL $quit"
    [ $DEBUG = on ] && eval echo "debug: $LISP_COMMAND"
    eval "$LISP_COMMAND" ; }

# actions
install () {
    check_root_privileges
    EVAL="'(install-$1 \"$OBJECT\" $2)'"
    ERRLOG="$LOG_DIR/install-${1}_${OBJECT}_error.log"
    COMMANDS="$eval $EVAL $quit 2>$ERRLOG"
    [ $DEBUG = on ] && eval echo "debug: $LISP_COMMAND"
    eval "$LISP_COMMAND"
    if [ -s $ERRLOG ]; then
        eval echo -e $LISP_ERROR_MSG
    else # success, so
        rm $ERRLOG # because it's empty
    fi
    rotate_installed_systems_files
    write_links_to_additional_system_files
    additional_systems_report ; }

uninstall () {
    check_root_privileges
    EVAL="'(uninstall-$1 \"$OBJECT\")'"
    ERRLOG="$LOG_DIR/uninstall-${1}_${OBJECT}_error.log"
    COMMANDS="$eval $EVAL $quit 2>$ERRLOG"
    [ $DEBUG = on ] && eval echo "debug: $LISP_COMMAND"
    eval "$LISP_COMMAND"
    if [ -s $ERRLOG ]; then
        eval echo -e $LISP_ERROR_MSG
    else # success, so
        rm $ERRLOG # because it's empty
    fi
    rotate_installed_systems_files
    remove_links_to_removed_system_files
    removed_systems_report ; }

self_update () {
    check_root_privileges
    EVAL="'(self-update)'"
    ERRLOG="$LOG_DIR/self-update_error.log"
    COMMANDS="$eval $EVAL $quit 2>$ERRLOG"
    [ $DEBUG = on ] && eval echo "debug: $LISP_COMMAND"
    eval "$LISP_COMMAND"
    if [ -s $ERRLOG ]; then
        eval echo -e $LISP_ERROR_MSG
    else # success, so
        rm $ERRLOG # because it's empty
    fi ; }

update_systems () {
    check_root_privileges
    EVAL="'(update-systems)'"
    ERRLOG="$LOG_DIR/update-systems_error.log"
    COMMANDS="$eval $EVAL $quit 2>$ERRLOG"
    [ $DEBUG = on ] && eval echo "debug: $LISP_COMMAND"
    eval "$LISP_COMMAND"
    if [ -s $ERRLOG ]; then
        eval echo -e $LISP_ERROR_MSG
    else # success, so
        rm $ERRLOG # because it's empty
    fi
    rotate_installed_systems_files
    remove_links_to_removed_system_files
    removed_systems_report
    write_links_to_additional_system_files
    additional_systems_report ; }

downdate_systems () {
    check_root_privileges
    EVAL="'(downdate-systems \"$OBJECT\")'"
    ERRLOG="$LOG_DIR/downdate-systems_error.log"
    COMMANDS="$eval $EVAL $quit 2>$ERRLOG"
    [ $DEBUG = on ] && eval echo "debug: $LISP_COMMAND"
    eval "$LISP_COMMAND"
    if [ -s $ERRLOG ]; then
        eval echo -e $LISP_ERROR_MSG
    else # success, so
        rm $ERRLOG # because it's empty
    fi
    rotate_installed_systems_files
    remove_links_to_removed_system_files
    removed_systems_report
    write_links_to_additional_system_files
    additional_systems_report ; }

#-----------------------------------------------------------------------------
# top level

case $ACTION in
     #          command line  shell function       $1        $2
     #          ------------  --------------       --        --
     # queries
                    releases) list                 releases     ;; # no OBJECT req'd
                     systems) list                 systems      ;; # no OBJECT req'd
             release-systems) list_release_systems              ;; # test on xcvb
 depends|system-dependencies) list_dependencies                 ;;
              system-apropos) system_apropos                    ;;
                    versions) versions                          ;;
     # actions
      install|install-system) install              system       ;;
          install-no-compile) install              system    t  ;; # [2]
  uninstall|uninstall-system) uninstall            system       ;;
#            install-release) install              release      ;;
# install-release-no-compile) install              release   t  ;;
#          uninstall-release) uninstall            release      ;;
              update-systems) update_systems                    ;; # no OBJECT req'd
            downdate-systems) downdate_systems                  ;; # dist file OBJECT
                 self-update) self_update                       ;; # no OBJECT req'd
     # maintenance
        refresh-system-links) refresh_system_links              ;; # no OBJECT req'd

                           *) echo "Unknown action.  Aborting." && exit 1 ;;
esac

# [1] When the last system has been uninstalled, there are no .txt files
#     remaining, so we must redirect stderr to /dev/null in order to muffle the
#     cat.

# [2] Some systems require compilation for their dependencies to be handled
#     correctly
